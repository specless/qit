@mixin sp-color-helper($color, $attr, $root, $map, $special: '', $override: false) {
  @if ($color == 'transparent' or $color == transparent) {
    #{$attr}: if($override, transparent !important, transparent);;
  } @else {
    $key: #{$root}-#{$color};
    @if (map-has-key($map, $key)) {
      $val: map-get($map, $key);
      @if $special == '' {
        #{$attr}: if($override, $val !important, $val);
      } @else if $special == linear-gradient {
        #{$attr}: if($override, linear-gradient($val, $val) !important, linear-gradient($val, $val));
      }
    } @else {
      @error '#{$key} does not exist in #{$map}';
    }
  }
}

@mixin sp-color($color, $attr, $override: false) {
  @include sp-color-helper($color, $attr, sp-color, $sp-color, '', $override);
}

@mixin sp-color-overlay($level, $attr, $root, $map, $special, $override: false) {
  @include sp-color-helper($level, $attr, $root, $map, $special, $override);
}

@mixin sp-color-overlay-dark($level, $attr, $special: '', $override: false) {
  @include sp-color-overlay($level, $attr, sp-shade-dark, $sp-overlay-dark, $special, $override);
}

@mixin sp-color-overlay-light($level, $attr, $special: '', $override: false) {
  @include sp-color-overlay($level, $attr, sp-shade-light, $sp-overlay-light, $special, $override);
}

/////////////////////////
//                     //
//    font colors      //
//                     //
/////////////////////////

@mixin sp-font-color($color: null, $override: false) {
  $val: $color;
  @if ($color == inherit or $color == initial) {
    $val: $color;
    color: if($override, $val !important, $val);
  } @else if ($color == null or $color == base or $color == '') {
    $val: $sp-shade-dark-4;
    color: if($override, $val !important, $val);
    @include sp-state-dark {
      $val: $sp-shade-light-4;
      color: if($override, $val !important, $val);
    }
  } @else if ($color == contrast) {
    $val: $sp-shade-dark-5;
    color: if($override, $val !important, $val);
    @include sp-state-dark {
      $val: $sp-color-white;
      color: if($override, $val !important, $val);
    }
  } @else if ($color == muted) {
    $val: $sp-shade-dark-3;
    color: if($override, $val !important, $val);
    @include sp-state-dark {
      $val: $sp-shade-light-2;
      color: if($override, $val !important, $val);
    }
  } @else if ($color == success) {
    $val: darken($sp-color-success, 12%);
    color: if($override, $val !important, $val);
    @include sp-state-dark {
      $val: $sp-color-success;
      color: if($override, $val !important, $val);
    }
  } @else if ($color == primary) {
    $val: darken($sp-color-primary, 10%);
    color: if($override, $val !important, $val);
    @include sp-state-dark {
      $val: $sp-color-primary;
      color: if($override, $val !important, $val);
    }
  } @else if ($color == warning) {
    $val: darken($sp-color-warning, 10%);
    color: if($override, $val !important, $val);
    @include sp-state-dark {
      $val: $sp-color-warning;
      color: if($override, $val !important, $val);
    }
  } @else if ($color == danger) {
    $val: darken($sp-color-danger, 10%);
    color: if($override, $val !important, $val);
    @include sp-state-dark {
      $val: $sp-color-danger;
      color: if($override, $val !important, $val);
    }
  } @else {
    @if (map-has-key($sp-color, 'sp-color-#{$color}')) {
      $val: map-get($sp-color, 'sp-color-#{$color}');
      color: if($override, $val !important, $val);
    }
  }
}

/////////////////////////
//                     //
//  background colors  //
//                     //
/////////////////////////

@mixin sp-bg-color($color, $override: false) {
  @if ($color == success) {
    $val: darken($sp-color-success, 5%);
    background-color: if($override, $val !important, $val);
  } @else {
    @include sp-color($color, background-color, $override);
  }
}

@mixin sp-bg-overlay-dark($level, $override: false) {
  @include sp-color-overlay-dark($level, background-image, linear-gradient, $override);
}

@mixin sp-bg-overlay-light($level, $override: false) {
  @include sp-color-overlay-light($level, background-image, linear-gradient, $override);
}

/////////////////////////
//                     //
//    border colors    //
//                     //
/////////////////////////

@mixin sp-border-color($color, $location: null, $override: false) {
  $attr: border-color;
  @if $location == top or
      $location == right or
      $location == bottom or
      $location == left {
    $attr: 'border-#{$location}-color';
  }
  @include sp-color($color, $attr, $override);
}

@mixin sp-border-overlay-dark($color, $location: null, $override: false) {
  $attr: border-color;
  @if $location == top or
      $location == right or
      $location == bottom or
      $location == left {
    $attr: 'border-#{$location}-color';
  }
  @include sp-color-overlay-dark($color, $attr, '', $override);
}

@mixin sp-border-overlay-light($color, $location: null, $override: false) {
  $attr: border-color;
  @if $location == top or
      $location == right or
      $location == bottom or
      $location == left {
    $attr: 'border-#{$location}-color';
  }
  @include sp-color-overlay-light($color, $attr, '', $override);
}